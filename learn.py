"""
üî∂ –ó–∞–¥–∞—á–∞ 1: –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö —Å–µ–Ω—Å–æ—Ä—ñ–≤ –∫–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä–∞
–£–º–æ–≤–∞: –¢–æ–±—ñ –Ω–∞–¥—ñ–π—à–æ–≤ —Å–ø–∏—Å–æ–∫ –∑—á–∏—Ç–∞–Ω–∏—Ö –≤–µ–∫—Ç–æ—Ä—ñ–≤ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è
 (–∑–∞—Ä–æ–ª—è—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Ç—å –≤—ñ–¥ 10  –¥–æ 50)
 (–∫–æ–∂–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–æ–ª—è—Ç–∏ —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ 0 –¥–æ 100) –∑ IMU —Å–µ–Ω—Å–æ—Ä–∞
 (—É —Ñ–æ—Ä–º–∞—Ç—ñ (x, y, z) –≤ –æ–¥–∏–Ω–∏—Ü—è—Ö G), —ñ —Ç–∏ —Ö–æ—á–µ—à:

–ù–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä (—Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –π–æ–≥–æ –¥–æ–≤–∂–∏–Ω—É —Ç–∞ –ø–æ–¥—ñ–ª–∏—Ç–∏ –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –Ω–∞ –Ω–µ—ó).

–ó–∞–æ–∫—Ä—É–≥–ª–∏—Ç–∏ –∫–æ–∂–Ω—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –¥–æ 3 –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏.

–ó–±–µ—Ä–µ–≥—Ç–∏ —è–∫ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å.

–í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ:

acc_vectors = [
    (0.0, 1.0, 0.0),
    (0.5, 0.5, 0.707),
    (1.0, 1.0, 1.0),
    (0.0, 0.0, -1.0)
]
–ü—ñ–¥–∫–∞–∑–∫–∞:

–ù–∞–ø–∏—à–∏ –∫–∞—Å—Ç–æ–º–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é normalize_vector(v) ‚Äî –æ–±—á–∏—Å–ª—é—î –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤–µ–∫—Ç–æ—Ä.

–ü–æ—Ç—ñ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π map() –∑ lambda, —â–æ–± –æ–¥—Ä–∞–∑—É –æ–∫—Ä—É–≥–ª–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.


"""
import random
from math import sqrt

from numpy.lib.function_base import iterable

random.seed(42)

def get_length(vec:tuple) -> float:
    squared_vector = tuple(map(lambda x: x ** 2, vec))
    vec_sum = sum(squared_vector)
    length = sqrt(vec_sum)
    return length

def normalize_vector(vec:tuple, length:float):
    """
    –ß–µ—Ä–µ–∑ —Ü—é —Ñ—É–Ω–∫—ñ—É—é –º–∏ –¥–æ–≤–∂–∏–Ω—É –¥—ñ–ª–∏–º–æ –Ω–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä—ñ–≤
    :param vec: –Ω–µ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤–µ–∫—Ç–æ—Ä
    :return: –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤–µ–∫—Ç–æ—Ä
    """
    # normalized = (length / vec[0], length / vec[1], length / vec[2])
    # for i in vec:
         # vec_1 = length / i
         # vec_2 = length / i
         # vec_3 = length / i

    # vec_list = list(vec)

    # for i in range(len(vec_list)):
    #     vec_list[i] /= length
    #     # print(vec_list[i])
    #     vec = tuple(vec_list)
    # print(vec)


    norm_vec = map(lambda x: round(x / length, 3), vec)
    return norm_vec

vectors = []


for i in range(4):
    vector = tuple(random.randint(1, 101) for j in range(3))
    length = get_length(vector)
    normalized_vector = tuple(normalize_vector(vector, length))
    vectors.append(normalized_vector)

print(vectors)
# print(vectors[0][0])
# print("v", vectors)



# vec_length = get_length(vectors[0])
# print(vec_length)
# normalized_vector = normalize_vector(vectors[0], vec_length)
# print(tuple(normalized_vector))
#
# length_list = map(get_length, vectors)
# normalize_vectors = map(normalize_vector, [vectors, 0])
# print(tuple(normalize_data), tuple(normalize_vectors))
